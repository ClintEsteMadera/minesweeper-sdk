/**
 * Minesweeper 2020
 * REST API for the famous Minesweeper game
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationError from '../model/ApplicationError';
import Game from '../model/Game';
import GameCreationData from '../model/GameCreationData';
import GameUpdate from '../model/GameUpdate';

/**
* Games service.
* @module api/GamesApi
* @version 0.0.1
*/
export default class GamesApi {

    /**
    * Constructs a new GamesApi. 
    * @alias module:api/GamesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a new game for an existing User
     * @param {module:model/GameCreationData} gameCreationData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Game} and HTTP response
     */
    createGameWithHttpInfo(gameCreationData) {
      let postBody = gameCreationData;
      // verify the required parameter 'gameCreationData' is set
      if (gameCreationData === undefined || gameCreationData === null) {
        throw new Error("Missing the required parameter 'gameCreationData' when calling createGame");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Game;
      return this.apiClient.callApi(
        '/api/games', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new game for an existing User
     * @param {module:model/GameCreationData} gameCreationData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Game}
     */
    createGame(gameCreationData) {
      return this.createGameWithHttpInfo(gameCreationData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finds a Game by ID
     * @param {String} gameId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Game} and HTTP response
     */
    findGameByIdWithHttpInfo(gameId) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling findGameById");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Game;
      return this.apiClient.callApi(
        '/api/games/{gameId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Finds a Game by ID
     * @param {String} gameId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Game}
     */
    findGameById(gameId) {
      return this.findGameByIdWithHttpInfo(gameId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing Game, by performing individual updates to the board's cells
     * @param {String} gameId 
     * @param {module:model/GameUpdate} gameUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Game} and HTTP response
     */
    updateGameWithHttpInfo(gameId, gameUpdate) {
      let postBody = gameUpdate;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling updateGame");
      }
      // verify the required parameter 'gameUpdate' is set
      if (gameUpdate === undefined || gameUpdate === null) {
        throw new Error("Missing the required parameter 'gameUpdate' when calling updateGame");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Game;
      return this.apiClient.callApi(
        '/api/games/{gameId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an existing Game, by performing individual updates to the board's cells
     * @param {String} gameId 
     * @param {module:model/GameUpdate} gameUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Game}
     */
    updateGame(gameId, gameUpdate) {
      return this.updateGameWithHttpInfo(gameId, gameUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
